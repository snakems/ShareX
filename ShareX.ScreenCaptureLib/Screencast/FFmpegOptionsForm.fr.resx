<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="nudQscale.ToolTip" xml:space="preserve">
    <value>1 étant le plus élevé en qualité / la taille du fichier est plus grande et le 31 étant la plus faible qualité / la taille du fichier est plus petite.</value>
  </data>
  <data name="gbCommandLineArgs.Text" xml:space="preserve">
    <value>Arguments supplémentaires en ligne de commande</value>
  </data>
  <data name="lblAudioCodec.Text" xml:space="preserve">
    <value>Codec audio:</value>
  </data>
  <data name="lblAudioSource.Text" xml:space="preserve">
    <value>Source audio:</value>
  </data>
  <data name="lblAACQuality.Text" xml:space="preserve">
    <value>Bitrate:</value>
  </data>
  <data name="gbCodecs.Text" xml:space="preserve">
    <value>Codecs</value>
  </data>
  <data name="gbCommandLinePreview.Text" xml:space="preserve">
    <value>Aperçu de la ligne de commande</value>
  </data>
  <data name="nudx264CRF.ToolTip" xml:space="preserve">
    <value>Constante Factor (CRF): La gamme de l'échelle de quantification est 0-51: où 0 est sans perte, 23 est par défaut, et 51 est le pire possible.
Une valeur plus faible est d'une qualité supérieure et une gamme subjectivement saine est 18-28.
Considérez 18 pour être visuellement sans perte ou presque: il devrait ressembler à la même ou presque à la même que l'entrée mais il n' est pas techniquement sans perte.
La gamme est exponentielle, augmentant ainsi la valeur CRF 6 est environ la moitié le débit tout en -6 est environ deux fois le débit binaire.
L'utilisation générale est de choisir la valeur la plus haute CRF qui fournit toujours une qualité acceptable.
Si la sortie semble bonne, essayez une valeur plus élevée et si elle est mauvaise, choisissez une valeur inférieure.</value>
  </data>
  <data name="btnCopyPreview.Text" xml:space="preserve">
    <value>Copie</value>
  </data>
  <data name="nudVPxCRF.ToolTip" xml:space="preserve">
    <value>CRF valeur peut être de 4 à 63 et 10 est un bon point de départ. Des valeurs plus faibles signifient une meilleure qualité.</value>
  </data>
  <data name="tbAACBitrate.ToolTip" xml:space="preserve">
    <value>128k par défaut</value>
  </data>
  <data name="btnDownload.Text" xml:space="preserve">
    <value>Télécharger</value>
  </data>
  <data name="lblExtension.Text" xml:space="preserve">
    <value>Extension (format du conteneur):</value>
  </data>
  <data name="btnHelp.Text" xml:space="preserve">
    <value>Aide...</value>
  </data>
  <data name="cbShowError.Text" xml:space="preserve">
    <value>Si l'enregistrement ou le codage échoue, montrer la fenêtre d'erreur</value>
  </data>
  <data name="lblPreset.Text" xml:space="preserve">
    <value>Préselection</value>
  </data>
  <data name="lblMP3Quality.Text" xml:space="preserve">
    <value>Qualité:</value>
  </data>
  <data name="lblVorbisQuality.Text" xml:space="preserve">
    <value>Qualité:</value>
  </data>
  <data name="btnRefreshSources.Text" xml:space="preserve">
    <value>Rafraîchir</value>
  </data>
  <data name="tbVorbis_qscale.ToolTip" xml:space="preserve">
    <value>Range est 0-10, 10 étant la plus haute qualité. 3-6 est un bon choix pour essayer. Par défaut est 3.</value>
  </data>
  <data name="tbMP3_qscale.ToolTip" xml:space="preserve">
    <value>Range est 0-9 où une valeur inférieure est une qualité supérieure. 0-3 produira normalement des résultats transparents, 4 (par défaut) devrait être proche de la transparence perceptuelle, et 6 produit une qualité «acceptable».</value>
  </data>
  <data name="lblVideoSource.Text" xml:space="preserve">
    <value>Source vidéo:</value>
  </data>
  <data name="lblCodec.Text" xml:space="preserve">
    <value>Codec vidéo:</value>
  </data>
  <data name="btnTest.Text" xml:space="preserve">
    <value>Test avec CMD</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>ShareX - Options FFmpeg</value>
  </data>
  <data name="gbSource.Text" xml:space="preserve">
    <value>Sources</value>
  </data>
  <data name="cbPreset.ToolTip" xml:space="preserve">
    <value>Le défaut est "Medium".
Un préréglage est une collection d'options qui fourniront une certaine vitesse d'encodage à taux de compression. Un préréglage lent fournira une meilleure compression (compression est par la qualité de taille du fichier).
Cela signifie que, par exemple, si vous ciblez une taille de fichier certaine ou débit binaire constant, vous obtiendrez une meilleure qualité avec une présélection plus lent.
De même, pour l'encodage de qualité constante, vous aurez simplement à sauver débit en choisissant un préréglage plus lent.</value>
  </data>
  <data name="lblQscale.Text" xml:space="preserve">
    <value>Bit rate variable:</value>
  </data>
  <data name="cbCustomCommands.Text" xml:space="preserve">
    <value>Utiliser des commandes personnalisées</value>
  </data>
</root>